{"title":"Data Manipulation: dplyr vs pandas","markdown":{"yaml":{"title":"Data Manipulation: dplyr vs pandas","description":"How R's dplyr provides more intuitive and powerful data manipulation compared to Python's pandas","date":"2025-02-05","categories":["data-manipulation","dplyr","pandas"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nData manipulation is a fundamental part of data science workflows. While both R and Python have powerful tools for this task, R's dplyr package provides a more intuitive, consistent, and expressive approach compared to Python's pandas library.\n\n## The dplyr Philosophy\n\n### Grammar of Data Manipulation\n\ndplyr implements a grammar of data manipulation with five core verbs:\n\n```{r}\nlibrary(dplyr)\n\n# The five core dplyr verbs:\n# 1. filter() - subset rows\n# 2. select() - subset columns  \n# 3. mutate() - create new variables\n# 4. arrange() - sort rows\n# 5. summarize() - aggregate data\n```\n\n### Intuitive Syntax\n\ndplyr's syntax is designed to be readable and intuitive:\n\n```{r}\n#| echo: true\n\n# Load sample data\ndata(mtcars)\n\n# Simple data manipulation pipeline\nmtcars %>%\n  filter(cyl == 6) %>%\n  select(mpg, wt, hp) %>%\n  mutate(efficiency = mpg / wt) %>%\n  arrange(desc(efficiency)) %>%\n  head(5)\n```\n\n## Core Operations Comparison\n\n### Filtering Data\n\n#### R's dplyr Approach\n\n```{r}\n#| echo: true\n\n# Filter with multiple conditions\nmtcars %>%\n  filter(cyl >= 6, mpg > 20) %>%\n  select(mpg, cyl, wt)\n\n# Filter with string matching\nmtcars %>%\n  filter(grepl(\"Merc\", rownames(mtcars))) %>%\n  select(mpg, cyl, wt)\n```\n\n#### Python's pandas Approach\n\n```python\n# Filter with multiple conditions\nfiltered_data = mtcars[\n    (mtcars['cyl'] >= 6) & (mtcars['mpg'] > 20)\n][['mpg', 'cyl', 'wt']]\n\n# Filter with string matching\nmerc_data = mtcars[\n    mtcars.index.str.contains('Merc')\n][['mpg', 'cyl', 'wt']]\n```\n\n### Selecting Columns\n\n#### R's Intuitive Selection\n\n```{r}\n#| echo: true\n\n# Select specific columns\nmtcars %>%\n  select(mpg, cyl, wt)\n\n# Select columns by pattern\nmtcars %>%\n  select(starts_with(\"m\"), ends_with(\"t\"))\n\n# Exclude columns\nmtcars %>%\n  select(-mpg, -cyl)\n```\n\n#### Python's More Complex Selection\n\n```python\n# Select specific columns\nselected = mtcars[['mpg', 'cyl', 'wt']]\n\n# Select by pattern (requires additional work)\nimport re\npattern_cols = [col for col in mtcars.columns \n                if re.match(r'm.*|.*t$', col)]\npattern_data = mtcars[pattern_cols]\n\n# Exclude columns\nexcluded = mtcars.drop(['mpg', 'cyl'], axis=1)\n```\n\n### Creating New Variables\n\n#### R's mutate() Function\n\n```{r}\n#| echo: true\n\n# Create new variables\nmtcars %>%\n  mutate(\n    efficiency = mpg / wt,\n    weight_category = ifelse(wt > 3, \"Heavy\", \"Light\"),\n    power_to_weight = hp / wt\n  ) %>%\n  select(mpg, wt, efficiency, weight_category, power_to_weight) %>%\n  head(5)\n```\n\n#### Python's assign() Method\n\n```python\n# Create new variables\nmtcars_modified = mtcars.assign(\n    efficiency = mtcars['mpg'] / mtcars['wt'],\n    weight_category = np.where(mtcars['wt'] > 3, \"Heavy\", \"Light\"),\n    power_to_weight = mtcars['hp'] / mtcars['wt']\n)[['mpg', 'wt', 'efficiency', 'weight_category', 'power_to_weight']]\n```\n\n## Grouped Operations\n\n### R's group_by() and summarize()\n\n```{r}\n#| echo: true\n\n# Grouped summary statistics\nmtcars %>%\n  group_by(cyl) %>%\n  summarize(\n    mean_mpg = mean(mpg),\n    sd_mpg = sd(mpg),\n    count = n(),\n    min_wt = min(wt),\n    max_wt = max(wt)\n  )\n\n# Multiple grouping variables\nmtcars %>%\n  group_by(cyl, am) %>%\n  summarize(\n    avg_mpg = mean(mpg),\n    n_cars = n(),\n    .groups = \"drop\"\n  )\n```\n\n### Python's groupby() Operations\n\n```python\n# Grouped summary statistics\ngrouped = mtcars.groupby('cyl').agg({\n    'mpg': ['mean', 'std', 'count'],\n    'wt': ['min', 'max']\n}).round(2)\n\n# Multiple grouping variables\nmulti_grouped = mtcars.groupby(['cyl', 'am']).agg({\n    'mpg': 'mean',\n    'mpg': 'count'\n}).rename(columns={'mpg': 'avg_mpg', 'mpg': 'n_cars'})\n```\n\n## Joining Data\n\n### R's Join Functions\n\n```{r}\n#| echo: true\n\n# Create sample data for joining\ncars1 <- data.frame(\n  id = 1:5,\n  model = c(\"Toyota\", \"Honda\", \"Ford\", \"BMW\", \"Audi\"),\n  mpg = c(25, 28, 22, 30, 26)\n)\n\ncars2 <- data.frame(\n  id = c(1, 2, 4, 6),\n  price = c(25000, 22000, 45000, 35000),\n  year = c(2020, 2021, 2019, 2022)\n)\n\n# Inner join\ninner_join(cars1, cars2, by = \"id\")\n\n# Left join\nleft_join(cars1, cars2, by = \"id\")\n\n# Full join\nfull_join(cars1, cars2, by = \"id\")\n```\n\n### Python's merge() Function\n\n```python\n# Create sample data for joining\ncars1 = pd.DataFrame({\n    'id': range(1, 6),\n    'model': ['Toyota', 'Honda', 'Ford', 'BMW', 'Audi'],\n    'mpg': [25, 28, 22, 30, 26]\n})\n\ncars2 = pd.DataFrame({\n    'id': [1, 2, 4, 6],\n    'price': [25000, 22000, 45000, 35000],\n    'year': [2020, 2021, 2019, 2022]\n})\n\n# Inner join\ninner_merged = pd.merge(cars1, cars2, on='id', how='inner')\n\n# Left join\nleft_merged = pd.merge(cars1, cars2, on='id', how='left')\n\n# Full join\nfull_merged = pd.merge(cars1, cars2, on='id', how='outer')\n```\n\n## Advanced Operations\n\n### Window Functions in R\n\n```{r}\n#| echo: true\n\nlibrary(dplyr)\n\n# Window functions with dplyr\nmtcars %>%\n  group_by(cyl) %>%\n  mutate(\n    rank_mpg = rank(desc(mpg)),\n    cumsum_hp = cumsum(hp),\n    lag_mpg = lag(mpg),\n    lead_mpg = lead(mpg)\n  ) %>%\n  select(cyl, mpg, rank_mpg, cumsum_hp, lag_mpg, lead_mpg) %>%\n  head(10)\n```\n\n### Window Functions in Python\n\n```python\n# Window functions with pandas\nmtcars['rank_mpg'] = mtcars.groupby('cyl')['mpg'].rank(ascending=False)\nmtcars['cumsum_hp'] = mtcars.groupby('cyl')['hp'].cumsum()\nmtcars['lag_mpg'] = mtcars.groupby('cyl')['mpg'].shift(1)\nmtcars['lead_mpg'] = mtcars.groupby('cyl')['mpg'].shift(-1)\n```\n\n## Performance and Memory\n\n### R's data.table Alternative\n\n```{r}\n#| echo: true\n\nlibrary(data.table)\n\n# Convert to data.table for high performance\nmtcars_dt <- as.data.table(mtcars)\n\n# Fast operations\nmtcars_dt[cyl >= 6, .(mean_mpg = mean(mpg), count = .N), by = cyl]\n\n# Memory efficient operations\nmtcars_dt[, efficiency := mpg / wt]\n```\n\n### Python's Performance Options\n\n```python\n# Python has limited high-performance alternatives\n# Most operations are slower than R's data.table\n```\n\n## Error Handling\n\n### R's Informative Error Messages\n\n```{r}\n#| echo: true\n\n# dplyr provides clear error messages\ntryCatch({\n  mtcars %>%\n    filter(nonexistent_column > 5)\n}, error = function(e) {\n  cat(\"Error:\", e$message, \"\\n\")\n})\n```\n\n### Python's Less Helpful Errors\n\n```python\n# pandas errors can be less informative\ntry:\n    mtcars[mtcars['nonexistent_column'] > 5]\nexcept KeyError as e:\n    print(f\"Error: {e}\")\n```\n\n## Key Advantages of dplyr\n\n### 1. **Consistent Syntax**\n\n```{r}\n#| echo: true\n\n# All dplyr functions follow the same pattern\nmtcars %>%\n  filter(mpg > 20) %>%\n  select(mpg, cyl, wt) %>%\n  mutate(efficiency = mpg / wt) %>%\n  group_by(cyl) %>%\n  summarize(\n    avg_efficiency = mean(efficiency),\n    count = n()\n  )\n```\n\n### 2. **Readable Code**\n\n```{r}\n#| echo: true\n\n# Code reads like natural language\nmtcars %>%\n  filter(cyl == 6) %>%\n  group_by(am) %>%\n  summarize(\n    average_mpg = mean(mpg),\n    count = n()\n  ) %>%\n  arrange(desc(average_mpg))\n```\n\n### 3. **Pipe Operator**\n\n```{r}\n#| echo: true\n\n# The pipe operator makes code flow naturally\nmtcars %>%\n  filter(mpg > 20) %>%\n  select(mpg, cyl, wt) %>%\n  mutate(efficiency = mpg / wt) %>%\n  arrange(desc(efficiency))\n```\n\n## Performance Comparison\n\n| Feature | R (dplyr) | Python (pandas) |\n|---------|-----------|-----------------|\n| Syntax | Intuitive, consistent | More complex, varies |\n| Readability | Excellent | Good |\n| Performance | Good (data.table for speed) | Good |\n| Error Messages | Clear and helpful | Less informative |\n| Learning Curve | Gentle | Steeper |\n| Documentation | Excellent | Good |\n| Community Support | Strong | Strong |\n\n## Conclusion\n\nR's dplyr provides superior data manipulation capabilities through:\n\n- **Intuitive grammar** of data manipulation\n- **Consistent syntax** across all operations\n- **Readable code** that flows naturally\n- **Powerful pipe operator** for chaining operations\n- **Clear error messages** for debugging\n- **Excellent documentation** and community support\n\nWhile pandas is powerful, dplyr offers a more elegant and user-friendly approach to data manipulation, especially for statistical analysis workflows.\n\n---\n\n*Next: [Time Series Analysis: R's Comprehensive Tools](/blog/time-series-analysis-r-vs-python.qmd)*","srcMarkdownNoYaml":"\n\n## Introduction\n\nData manipulation is a fundamental part of data science workflows. While both R and Python have powerful tools for this task, R's dplyr package provides a more intuitive, consistent, and expressive approach compared to Python's pandas library.\n\n## The dplyr Philosophy\n\n### Grammar of Data Manipulation\n\ndplyr implements a grammar of data manipulation with five core verbs:\n\n```{r}\nlibrary(dplyr)\n\n# The five core dplyr verbs:\n# 1. filter() - subset rows\n# 2. select() - subset columns  \n# 3. mutate() - create new variables\n# 4. arrange() - sort rows\n# 5. summarize() - aggregate data\n```\n\n### Intuitive Syntax\n\ndplyr's syntax is designed to be readable and intuitive:\n\n```{r}\n#| echo: true\n\n# Load sample data\ndata(mtcars)\n\n# Simple data manipulation pipeline\nmtcars %>%\n  filter(cyl == 6) %>%\n  select(mpg, wt, hp) %>%\n  mutate(efficiency = mpg / wt) %>%\n  arrange(desc(efficiency)) %>%\n  head(5)\n```\n\n## Core Operations Comparison\n\n### Filtering Data\n\n#### R's dplyr Approach\n\n```{r}\n#| echo: true\n\n# Filter with multiple conditions\nmtcars %>%\n  filter(cyl >= 6, mpg > 20) %>%\n  select(mpg, cyl, wt)\n\n# Filter with string matching\nmtcars %>%\n  filter(grepl(\"Merc\", rownames(mtcars))) %>%\n  select(mpg, cyl, wt)\n```\n\n#### Python's pandas Approach\n\n```python\n# Filter with multiple conditions\nfiltered_data = mtcars[\n    (mtcars['cyl'] >= 6) & (mtcars['mpg'] > 20)\n][['mpg', 'cyl', 'wt']]\n\n# Filter with string matching\nmerc_data = mtcars[\n    mtcars.index.str.contains('Merc')\n][['mpg', 'cyl', 'wt']]\n```\n\n### Selecting Columns\n\n#### R's Intuitive Selection\n\n```{r}\n#| echo: true\n\n# Select specific columns\nmtcars %>%\n  select(mpg, cyl, wt)\n\n# Select columns by pattern\nmtcars %>%\n  select(starts_with(\"m\"), ends_with(\"t\"))\n\n# Exclude columns\nmtcars %>%\n  select(-mpg, -cyl)\n```\n\n#### Python's More Complex Selection\n\n```python\n# Select specific columns\nselected = mtcars[['mpg', 'cyl', 'wt']]\n\n# Select by pattern (requires additional work)\nimport re\npattern_cols = [col for col in mtcars.columns \n                if re.match(r'm.*|.*t$', col)]\npattern_data = mtcars[pattern_cols]\n\n# Exclude columns\nexcluded = mtcars.drop(['mpg', 'cyl'], axis=1)\n```\n\n### Creating New Variables\n\n#### R's mutate() Function\n\n```{r}\n#| echo: true\n\n# Create new variables\nmtcars %>%\n  mutate(\n    efficiency = mpg / wt,\n    weight_category = ifelse(wt > 3, \"Heavy\", \"Light\"),\n    power_to_weight = hp / wt\n  ) %>%\n  select(mpg, wt, efficiency, weight_category, power_to_weight) %>%\n  head(5)\n```\n\n#### Python's assign() Method\n\n```python\n# Create new variables\nmtcars_modified = mtcars.assign(\n    efficiency = mtcars['mpg'] / mtcars['wt'],\n    weight_category = np.where(mtcars['wt'] > 3, \"Heavy\", \"Light\"),\n    power_to_weight = mtcars['hp'] / mtcars['wt']\n)[['mpg', 'wt', 'efficiency', 'weight_category', 'power_to_weight']]\n```\n\n## Grouped Operations\n\n### R's group_by() and summarize()\n\n```{r}\n#| echo: true\n\n# Grouped summary statistics\nmtcars %>%\n  group_by(cyl) %>%\n  summarize(\n    mean_mpg = mean(mpg),\n    sd_mpg = sd(mpg),\n    count = n(),\n    min_wt = min(wt),\n    max_wt = max(wt)\n  )\n\n# Multiple grouping variables\nmtcars %>%\n  group_by(cyl, am) %>%\n  summarize(\n    avg_mpg = mean(mpg),\n    n_cars = n(),\n    .groups = \"drop\"\n  )\n```\n\n### Python's groupby() Operations\n\n```python\n# Grouped summary statistics\ngrouped = mtcars.groupby('cyl').agg({\n    'mpg': ['mean', 'std', 'count'],\n    'wt': ['min', 'max']\n}).round(2)\n\n# Multiple grouping variables\nmulti_grouped = mtcars.groupby(['cyl', 'am']).agg({\n    'mpg': 'mean',\n    'mpg': 'count'\n}).rename(columns={'mpg': 'avg_mpg', 'mpg': 'n_cars'})\n```\n\n## Joining Data\n\n### R's Join Functions\n\n```{r}\n#| echo: true\n\n# Create sample data for joining\ncars1 <- data.frame(\n  id = 1:5,\n  model = c(\"Toyota\", \"Honda\", \"Ford\", \"BMW\", \"Audi\"),\n  mpg = c(25, 28, 22, 30, 26)\n)\n\ncars2 <- data.frame(\n  id = c(1, 2, 4, 6),\n  price = c(25000, 22000, 45000, 35000),\n  year = c(2020, 2021, 2019, 2022)\n)\n\n# Inner join\ninner_join(cars1, cars2, by = \"id\")\n\n# Left join\nleft_join(cars1, cars2, by = \"id\")\n\n# Full join\nfull_join(cars1, cars2, by = \"id\")\n```\n\n### Python's merge() Function\n\n```python\n# Create sample data for joining\ncars1 = pd.DataFrame({\n    'id': range(1, 6),\n    'model': ['Toyota', 'Honda', 'Ford', 'BMW', 'Audi'],\n    'mpg': [25, 28, 22, 30, 26]\n})\n\ncars2 = pd.DataFrame({\n    'id': [1, 2, 4, 6],\n    'price': [25000, 22000, 45000, 35000],\n    'year': [2020, 2021, 2019, 2022]\n})\n\n# Inner join\ninner_merged = pd.merge(cars1, cars2, on='id', how='inner')\n\n# Left join\nleft_merged = pd.merge(cars1, cars2, on='id', how='left')\n\n# Full join\nfull_merged = pd.merge(cars1, cars2, on='id', how='outer')\n```\n\n## Advanced Operations\n\n### Window Functions in R\n\n```{r}\n#| echo: true\n\nlibrary(dplyr)\n\n# Window functions with dplyr\nmtcars %>%\n  group_by(cyl) %>%\n  mutate(\n    rank_mpg = rank(desc(mpg)),\n    cumsum_hp = cumsum(hp),\n    lag_mpg = lag(mpg),\n    lead_mpg = lead(mpg)\n  ) %>%\n  select(cyl, mpg, rank_mpg, cumsum_hp, lag_mpg, lead_mpg) %>%\n  head(10)\n```\n\n### Window Functions in Python\n\n```python\n# Window functions with pandas\nmtcars['rank_mpg'] = mtcars.groupby('cyl')['mpg'].rank(ascending=False)\nmtcars['cumsum_hp'] = mtcars.groupby('cyl')['hp'].cumsum()\nmtcars['lag_mpg'] = mtcars.groupby('cyl')['mpg'].shift(1)\nmtcars['lead_mpg'] = mtcars.groupby('cyl')['mpg'].shift(-1)\n```\n\n## Performance and Memory\n\n### R's data.table Alternative\n\n```{r}\n#| echo: true\n\nlibrary(data.table)\n\n# Convert to data.table for high performance\nmtcars_dt <- as.data.table(mtcars)\n\n# Fast operations\nmtcars_dt[cyl >= 6, .(mean_mpg = mean(mpg), count = .N), by = cyl]\n\n# Memory efficient operations\nmtcars_dt[, efficiency := mpg / wt]\n```\n\n### Python's Performance Options\n\n```python\n# Python has limited high-performance alternatives\n# Most operations are slower than R's data.table\n```\n\n## Error Handling\n\n### R's Informative Error Messages\n\n```{r}\n#| echo: true\n\n# dplyr provides clear error messages\ntryCatch({\n  mtcars %>%\n    filter(nonexistent_column > 5)\n}, error = function(e) {\n  cat(\"Error:\", e$message, \"\\n\")\n})\n```\n\n### Python's Less Helpful Errors\n\n```python\n# pandas errors can be less informative\ntry:\n    mtcars[mtcars['nonexistent_column'] > 5]\nexcept KeyError as e:\n    print(f\"Error: {e}\")\n```\n\n## Key Advantages of dplyr\n\n### 1. **Consistent Syntax**\n\n```{r}\n#| echo: true\n\n# All dplyr functions follow the same pattern\nmtcars %>%\n  filter(mpg > 20) %>%\n  select(mpg, cyl, wt) %>%\n  mutate(efficiency = mpg / wt) %>%\n  group_by(cyl) %>%\n  summarize(\n    avg_efficiency = mean(efficiency),\n    count = n()\n  )\n```\n\n### 2. **Readable Code**\n\n```{r}\n#| echo: true\n\n# Code reads like natural language\nmtcars %>%\n  filter(cyl == 6) %>%\n  group_by(am) %>%\n  summarize(\n    average_mpg = mean(mpg),\n    count = n()\n  ) %>%\n  arrange(desc(average_mpg))\n```\n\n### 3. **Pipe Operator**\n\n```{r}\n#| echo: true\n\n# The pipe operator makes code flow naturally\nmtcars %>%\n  filter(mpg > 20) %>%\n  select(mpg, cyl, wt) %>%\n  mutate(efficiency = mpg / wt) %>%\n  arrange(desc(efficiency))\n```\n\n## Performance Comparison\n\n| Feature | R (dplyr) | Python (pandas) |\n|---------|-----------|-----------------|\n| Syntax | Intuitive, consistent | More complex, varies |\n| Readability | Excellent | Good |\n| Performance | Good (data.table for speed) | Good |\n| Error Messages | Clear and helpful | Less informative |\n| Learning Curve | Gentle | Steeper |\n| Documentation | Excellent | Good |\n| Community Support | Strong | Strong |\n\n## Conclusion\n\nR's dplyr provides superior data manipulation capabilities through:\n\n- **Intuitive grammar** of data manipulation\n- **Consistent syntax** across all operations\n- **Readable code** that flows naturally\n- **Powerful pipe operator** for chaining operations\n- **Clear error messages** for debugging\n- **Excellent documentation** and community support\n\nWhile pandas is powerful, dplyr offers a more elegant and user-friendly approach to data manipulation, especially for statistical analysis workflows.\n\n---\n\n*Next: [Time Series Analysis: R's Comprehensive Tools](/blog/time-series-analysis-r-vs-python.qmd)*"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"number-sections":true,"html-math-method":"katex","output-file":"data-manipulation-r-vs-python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":"cosmo","toc-location":"left","fig-cap-location":"bottom","title":"Data Manipulation: dplyr vs pandas","description":"How R's dplyr provides more intuitive and powerful data manipulation compared to Python's pandas","date":"2025-02-05","categories":["data-manipulation","dplyr","pandas"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}